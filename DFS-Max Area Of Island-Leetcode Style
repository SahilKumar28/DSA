class Solution {
public:

const int N=60;
vector<vector<bool>> visited;
int max_area=0,current_area=0,rows,cols;

    std::array<int, 4> cr = {-1, 1, 0, 0};
    std::array<int, 4> cc = {0, 0, -1, 1};

void dfs(vector<vector<int>> &grid, int r,int c){
	current_area++;
	visited[r][c] = true;
	
	for(int i=0;i<4;i++){
		int u_row = r + cr[i];
		int u_col = c + cc[i];
		
		if(u_row>=0 && u_row<rows && u_col>=0 && u_col<cols){
			if(!visited[u_row][u_col] && grid[u_row][u_col]==1){
				dfs(grid, u_row, u_col);
			}
		}
	}
}


    int maxAreaOfIsland(vector<vector<int>>& grid) {
        rows = grid.size();
        cols = grid[0].size();

        visited = vector<vector<bool>>(rows, vector<bool>(cols, false));
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == 1 && !visited[i][j]) {
                    dfs(grid, i, j);
                    if (current_area > max_area)
                        max_area = current_area;
                    current_area = 0;
                }
            }
        }
        return max_area;
    }
};
