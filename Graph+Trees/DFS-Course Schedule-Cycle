class Solution {
public:

vector<vector<int>> graph;
vector<bool> vis;
vector<bool> dfs_vis;

bool cycle(int n, vector<vector<int>>& arr, int vertex){
  
  vis[vertex] = true;
  dfs_vis[vertex] = true;
  
  for(auto child : graph[vertex]){
    if(!vis[child]){
     if(cycle(n,arr,child))return true;
    }
    else if(vis[child] && dfs_vis[child]){
        return true;
    }
  }

  dfs_vis[vertex] = false;
  return false;

}

    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        graph = vector<vector<int>>(numCourses);
        vis = vector<bool>(numCourses,false);
        dfs_vis = vector<bool>(numCourses,false);
        int n = numCourses;

        for(int i=0; i < prerequisites.size(); i++ ){
         int from = prerequisites[i][1];
         int to = prerequisites[i][0];

         graph[to].push_back(from);   
        }

        for(int i=0 ; i<numCourses ;i++){
         if(!vis[i]){
          if(cycle(n, prerequisites, i))return false;
         }
        }
        return true;
        
    }
};
