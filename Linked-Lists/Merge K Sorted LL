class Solution {
public:
    struct compare {
        bool operator()(ListNode* a, ListNode* b) { return a->val > b->val; }
    };
    priority_queue<ListNode*, vector<ListNode*>, compare> pq;

    ListNode* mergeKLists(vector<ListNode*>& lists) {

        if (!lists.size())
            return NULL;

        for (int i = 0; i < lists.size(); i++) {
            if (lists[i])
                pq.push(lists[i]);
        }

        ListNode* head = NULL;
        ListNode* prev = NULL;

        while (!pq.empty()) {
            ListNode* smallest = pq.top();
            pq.pop();
            if (smallest->next)
                pq.push(smallest->next);

            if (!head) {
                head = smallest;
                prev = smallest;
            } 
            
            else {
                prev->next = smallest;
                prev = prev->next;
            }
        }
        return head;
    }
};
