class Solution {
public:
    Node* copyRandomList(Node* head) {
        Node* temp = head;
        unordered_map<Node*, Node*> mp;

        while(temp){
            mp[temp] = new Node(temp->val);
            temp = temp->next;
        }

        temp = head;

        while(temp){
            mp[temp]->next = mp[temp->next];
            mp[temp]->random = mp[temp->random];
            temp = temp->next;
        }

        return mp[head];
    }
};


MORE OPTIMAL APPROACH:

class Solution {
public:
    Node* copyRandomList(Node* head) {
        Node* temp = head;
        Node* store = NULL;
        
        while (temp != NULL) {
            Node* copy = new Node(temp->val);
            copy->next = temp->next;
            temp->next = copy;

            temp = temp->next->next;
        }

        temp = head;

        while(temp!=NULL){
            if(temp->random)temp->next->random = temp->random->next;
            temp = temp->next->next;
        }

        temp = head;
        Node* dummy = new Node(-1);
        Node* res = dummy;
        while(temp!=NULL){
            res->next = temp->next;
            temp->next = temp->next->next;
            res = res->next;
            temp = temp->next;
        }      

        return dummy->next;
  
    }
};
