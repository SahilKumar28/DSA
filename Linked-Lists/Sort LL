class Solution {
public:

    ListNode* findMiddle(ListNode* head){
        ListNode* slow = head;
        ListNode* fast = head;

        while(fast->next!=NULL && fast->next->next!=NULL){
            slow = slow->next;
            fast = fast->next->next;
        }

        return slow;
    }

    ListNode* merge(ListNode* l1, ListNode* l2){
        ListNode* dummy = new ListNode(-1);
        ListNode* temp = dummy;

        while(l1!=NULL && l2!=NULL){
            if(l1->val > l2->val){
                temp->next = l2;
                temp = l2; 
                l2 = l2->next;
            }
            else{
                temp->next = l1;
                temp = l1;
                l1 = l1->next;
            }
        }
        if(l1)temp->next = l1;
        else if(l2)temp->next = l2;

        return dummy->next;
    }

    ListNode* sortList(ListNode* head) {
        if(head==NULL || head->next==NULL)return head;

        ListNode* middle = findMiddle(head);
        ListNode* leftHead = head;
        ListNode* rightHead = middle->next;
        middle->next = NULL;
        
        ListNode* s_leftHead = sortList(leftHead);
        ListNode* s_rightHead = sortList(rightHead);

        return merge(s_leftHead, s_rightHead);
    }
};
