class Solution {

    int rows, cols;
    const int INF = 1e9 + 10;
    vector<vector<int>> cost;

    std::array<int, 4> cr = {0, 0, 1, -1};
    std::array<int, 4> cc = {1, -1, 0, 0};

    pair<int, int> movement(int no) {
        if (no == 1)
            return {0, 1};
        else if (no == 2)
            return {0, -1};
        else if (no == 3)
            return {1, 0};
        else if (no == 4)
            return {-1, 0};

        return {-1, -1};
    }

    bool isValid(pair<int, int> child) {
        return child.first >= 0 && child.second >= 0 && child.first < rows && child.second < cols;
    }

    int bfs(vector<vector<int>>& grid, int r, int c) {
        deque<pair<int, int>> q;
        q.push_front({r, c});
        cost[r][c] = 0;

        while (!q.empty()) {
            pair<int, int> current = q.front();
            q.pop_front();
            pair<int, int> step = movement(grid[current.first][current.second]);

            for (int i = 0; i < 4; i++) {
                int child_X = current.first + cr[i];
                int child_Y = current.second + cc[i];
                if(!isValid({child_X,child_Y})) continue;
                int wt = (cr[i] == step.first && cc[i] == step.second? 0 : 1); 
                if (cost[current.first][current.second] + wt <  cost[child_X][child_Y]) {
                    cost[child_X][child_Y] = cost[current.first][current.second] + wt ;
                    if (!wt) q.push_front({child_X, child_Y});
                    else q.push_back({child_X, child_Y});
                }
            }
        }
        return cost[rows-1][cols-1]!=INF? cost[rows-1][cols-1] : -1;
    }

public:
    int minCost(vector<vector<int>>& grid) {
        rows = grid.size();
        cols = grid[0].size();
        cost = vector<vector<int>>(rows, vector<int>(cols, INF));
        return bfs(grid, 0, 0);
    }
};
