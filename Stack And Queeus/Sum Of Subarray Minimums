class Solution {
public:

    void PrevSmallerEqualElement(vector<int> &PSEE, vector<int> &arr){
        stack<int> st;
        
        for(int i = 0; i < arr.size(); i++ ){
            while(!st.empty() && arr[st.top()] > arr[i])st.pop();
            PSEE[i] = st.empty() ? -1 : st.top();
            st.push(i);
        }
        
    }

    void NextSmallerElement(vector<int> &NSE, vector<int> &arr){
        stack<int> st;
        
        for(int i = arr.size()-1; i >= 0; i-- ){
            while(!st.empty() && arr[st.top()] >= arr[i])st.pop();
            NSE[i] = st.empty() ? arr.size() : st.top();
            st.push(i);
        }
        
    }


    int sumSubarrayMins(vector<int>& arr) {

        int MOD = 1e9 + 7;
        
        vector<int> PSEE(arr.size());
        vector<int> NSE(arr.size());

        PrevSmallerEqualElement(PSEE, arr);
        NextSmallerElement(NSE, arr);

        long long total = 0;

        for(int i=0; i<arr.size(); i++){
            int SP = i - PSEE[i];
            int EP = NSE[i] - i;

            total = (total + (1LL * SP* EP * arr[i]) % MOD) % MOD;
        }

    return total;

    }
};
