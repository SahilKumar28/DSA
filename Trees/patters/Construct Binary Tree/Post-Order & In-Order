class Solution {
public:

    TreeNode* build(vector<int>& inorder, int inStart, int inEnd, vector<int>& postorder, int postStart, int postEnd, unordered_map<int,int> &m){
        if(postStart > postEnd || inStart > inEnd)return NULL;

        TreeNode* root = new TreeNode(postorder[postEnd]);

        int inRoot = m[root->val];
        int numsLeft = inRoot - inStart;

        root->left = build(inorder, inStart, inRoot - 1, postorder, postStart, postStart + numsLeft - 1, m);
        root->right = build(inorder, inRoot + 1, inEnd, postorder, postStart + numsLeft, postEnd - 1, m);

        return root;
    }

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        unordered_map<int,int>m;
        for(int i=0; i < inorder.size(); i++)m[inorder[i]]=i;
        return build(inorder, 0, inorder.size()-1, postorder, 0, postorder.size()-1, m);

    }
};
