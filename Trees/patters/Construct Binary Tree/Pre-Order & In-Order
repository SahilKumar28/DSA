class Solution {
public:
    TreeNode* build(vector<int>& preorder, int PreStart, int PreEnd,
                    vector<int>& inorder, int InStart, int InEnd,
                    unordered_map<int, int> &m) {
        if (PreStart > PreEnd || InStart > InEnd)
            return NULL;

        TreeNode* root = new TreeNode(preorder[PreStart]);

        int InRoot = m[root->val];
        int numsLeft = InRoot - InStart;

        root->left = build(preorder, PreStart + 1, PreStart + numsLeft, inorder,
                           InStart, InRoot - 1, m);

        root->right = build(preorder, PreStart + numsLeft + 1, PreEnd, inorder,
                            InRoot + 1, InEnd, m);

        return root;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        unordered_map<int, int> m;

        for (int i = 0; i < inorder.size(); i++) {
            m[inorder[i]] = i;
        }

        TreeNode* root = build(preorder, 0, preorder.size() - 1, inorder, 0,
                               inorder.size() - 1, m);
        return root;
    }
};
